import {Field, ID, ObjectType} from 'type-graphql';
import {BigIntType, Entity, ManyToOne, PrimaryKey, Property} from '@mikro-orm/core';
import { Business } from '../Business/Business';
import { WorkerPosition } from '../WorkerPosition/WorkerPosition';
import { v4 } from 'uuid';
import { getUnixTime } from 'date-fns';

/**
 * Business entity type.
 */
@ObjectType()
@Entity()
export class Worker {

    constructor(email: string, employer?: Business ) {
        let generatedCode = v4().slice(0, 16)
        this.id = `invited_${generatedCode}`
        this.email = email
        this.employer = employer

        // auto gen invite code
        this.invitation_code = generatedCode
    }

    /**
     * uuids are generated by cognito in a production environment.
     * Upon invitation, uuids are gen by us, after confirming a user they are automatically updated.
     */
    @Field(() => ID)
    @PrimaryKey()
    id!: string;

    @Field(() => Business, {nullable: true})
    @ManyToOne(() => Business, {nullable: true})
    employer?: Business;

    @Field(() => WorkerPosition, {nullable: true})
    @ManyToOne(() => WorkerPosition, {nullable: true})
    position?: WorkerPosition;

    /*
    A user is not allowed to update their email after sign up.
    */
    @Field()
    @Property()
    email!: string;

    /*
    This code is unique for each worker. Will use this code to confirm them once they sign up and assign them their respective employer and position.
    */
    @Field({nullable: true})
    @Property({nullable: true})
    invitation_code?: string;

    @Field({nullable: true})
    @Property({nullable: true})
    first_name?: string

    @Field({nullable: true})
    @Property({nullable: true})
    last_name?: string


    @Field({nullable: true})
    @Property({nullable: true})
    profile_picture?: string

    /**
     * Location related fields
     */
    @Field({nullable: true})
    @Property({nullable: true})
    address?: string

    @Field({nullable: true})
    @Property({nullable: true})
    city?: string

    @Field({nullable: true})
    @Property({nullable: true})
    state?: string

    @Field({nullable: true})
    @Property({nullable: true})
    postal?: string

    @Field({nullable: true})
    @Property({nullable: true})
    country?: string

    @Field({nullable: true})
    @Property({nullable: true})
    invited?: boolean = false
    
    @Field({nullable: true})
    @Property({nullable: true})
    confirmed?: boolean = false
    
    // Field decorator is emitted, this property will not be exposed via the api.
    @Property({type: BigIntType})
    created = getUnixTime(new Date())

    @Property({type: BigIntType, onUpdate: () => getUnixTime(new Date())})
    modified = getUnixTime(new Date())
}