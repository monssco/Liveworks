import {Field, ID, ObjectType} from 'type-graphql';
import {BigIntType, Cascade, Collection, Entity, ManyToOne, OneToMany, PrimaryKey, Property} from '@mikro-orm/core';
import { BusinessType } from '../BusinessType/BusinessType';
import { Worker } from '../Worker/Worker';
import { v4 } from 'uuid';
import { getUnixTime } from 'date-fns';

/**
 * Business entity type.
 */
@ObjectType()
@Entity()
export class Business {

    /**
     * Create a business entity
     * @param id id generated by cognito in production
     * @param email email used for signing up
     */
    constructor(id: string, email: string ) {
        this.id = id
        this.email = email

        // This is the venue's unique signup code
        this.invite_code = v4({}).toUpperCase().slice(0, 6)
        console.log("Signup code ", this.invite_code)
    }

    /**
     * uuids are generated by cognito in a production environment.
     */
    @Field(() => ID)
    @PrimaryKey()
    id!: string;

    /*
    A user is not allowed to update their email after sign up.
    */
    @Field()
    @Property()
    email!: string;

    @Field({nullable: true})
    @Property({nullable: true})
    name?: string

    @Field({nullable: true})
    @Property({nullable: true})
    profile_picture?: string

    /**
     * Location related fields
     */
    @Field({nullable: true})
    @Property({nullable: true})
    address?: string

    @Field({nullable: true})
    @Property({nullable: true})
    city?: string

    @Field({nullable: true})
    @Property({nullable: true})
    state?: string

    @Field({nullable: true})
    @Property({nullable: true})
    postal?: string

    @Field({nullable: true})
    @Property({nullable: true})
    country?: string

    @Field(()=> BusinessType, {nullable: true})
    @ManyToOne(() => BusinessType, {nullable: true})
    type?: BusinessType

    /**
     * Used for signing up bulk users so that they can automatically be registered to this business.
     * It is not needed to invite workers, as each worker will get their own auto-generated code instead.
     * Which will map to a unique position along with a venue.
     */
    @Field({nullable: true})
    @Property({nullable: true})
    invite_code?: string

    /**
     * A business can have many workers.
     */
    @Field(() => [Worker], {nullable: true})
    @OneToMany(() => Worker, worker => worker.employer, { cascade: [Cascade.ALL], nullable: true })
    employees = new Collection<Worker>(this);

    // Field decorator is emitted, this property will not be exposed via the api.
    @Property({type: BigIntType})
    created = getUnixTime(new Date());

    @Property({type: BigIntType, onUpdate: () => getUnixTime(new Date())})
    modified = getUnixTime(new Date())
}