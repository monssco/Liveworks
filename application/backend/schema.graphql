# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type BusinessType {
  id: ID!
  name: String!
  active: Boolean!
}

type WorkerPosition {
  id: ID!
  name: String!
  rank: Int!
  color: String!
  public: Boolean!
  active: Boolean!
  creator: Business
}

type Worker {
  id: ID!
  employer: Business
  position: WorkerPosition
  email: String!
  invitation_code: String
  first_name: String
  last_name: String
  profile_picture: String
  address: String
  city: String
  state: String
  postal: String
  country: String
  invited: Boolean
  confirmed: Boolean
}

type Business {
  id: ID!
  email: String!
  name: String
  profile_picture: String
  address: String
  city: String
  state: String
  postal: String
  country: String
  type: BusinessType
  invite_code: String
  employees: [Worker!]
}

type WorkDay {
  id: ID!
  creator: Business!

  # Represented as a unix timestamp
  date: Int!
  shifts: [Shift!]
}

type ShiftInvite {
  id: ID!
  shift: Shift!
  worker: Worker!
  invited: Boolean
}

type Shift {
  id: ID!
  day: WorkDay!
  position: WorkerPosition!

  # Unix timestamp
  start_time: Int!

  # Unix timestamp.
  end_time: Int!
  shiftInvites: [ShiftInvite!]
  notes: String
  rate: Float!
  address: String
}

input UpdateBusinessInput {
  email: String
  name: String
  address: String
  city: String
  state: String
  postal: String
  country: String

  # id of the business type
  type_id: String
}

input InviteWorkerToShiftInput {
  shift_id: String!
  worker_id: String!
}

input CreateShiftInput {
  position_id: String!

  # unix timestamp
  start_time: Int!

  # unix timestamp
  end_time: Int!
  rate: Int!

  # Notes that the workers should know about.
  notes: String

  # An array of worker ids ex: [uui2u30-dsdsd, ioi93io34-sdsodi9]
  worker_ids: [String!]
  address: String
}

input UnInviteWorkerToShiftInput {
  shift_invite_id: String!
  worker_id: String!
}

input ListShiftsInput {
  work_day_id: String!
  limit: Float!
  offset: Float!

  # Provide a position id if you want shifts for a given position.
  position_id: String
}

input UpdateShiftInput {
  shift_id: String!

  # unix timestamp
  start_time: Int

  # unix timestamp
  end_time: Int
  rate: Int

  # Notes that the workers should know about.
  notes: String
  address: String

  # String that contains the ids of all the workers, if they are omitted, that means that they have been uninvited from the shift.
  worker_ids: [String!]!
}

input InviteWorkerInput {
  email: String!
  first_name: String!
  last_name: String!
  position_id: String!
}

input ListWorkersInput {
  limit: Float!
  offset: Float!
  position_id: String
}

input CreatePositionInput {
  position_name: String!
  color: String!
}

input UpdatePositionInput {
  position_id: String!
  position_name: String
  color: String
}

input UpdateWorkerInput {
  email: String
  first_name: String
  last_name: String
  address: String
  city: String
  state: String
  postal: String
  country: String
}

type Query {
  # List all business types
  listBusinessType: [BusinessType!]!

  # Retrieve the current user business
  retrieveBusiness: Business!

  # Use this endpoint to retrieve a work day that overlaps with the given unix timestamp. If no workday exists, the return value will be null
  businessRetrieveWorkDay(
    # Unix timestamp
    for: Int!
  ): WorkDay

  # Lists all of the shifts on a given workday.
  businessListShifts(input: ListShiftsInput!): [Shift!]!

  # Lists all of the shifts on a given workday.
  businessRetrieveShift(id: String!): Shift!

  # Fetches all workers, use position id to filter by position. Supports pagination via limit and offset.
  businessListWorkers(input: ListWorkersInput!): [Worker!]!

  # Get all available positions that can be assigned to a worker.
  businessListWorkerPositions: [WorkerPosition!]!

  # Retrieve a WorkerPosition by id
  businessRetrievePosition(
    # The id of the WorkerPosition to retrieve
    id: String!
  ): WorkerPosition!

  # Given an invite code, it will retrieve the business information that is related to it. If no such business is found, it will respond with an error.
  checkInviteCode(code: String!): Business!
  worker: Worker
}

type Mutation {
  # Update your business information
  updateBusiness(business: UpdateBusinessInput!): Business!
  businessUpdateProfilePicture(file: Upload!): Boolean!

  # Use this endpoint to create a work day. If a workday exists already, it will be returned.
  businessCreateWorkDay(
    # Unix timestamp
    for: Int!
  ): WorkDay!

  # Use this endpoint to invite a worker to a shift.
  businessInviteWorkerToShift(input: InviteWorkerToShiftInput!): ShiftInvite!

  # Use this endpoint to create a shift.
  businessCreateShift(input: CreateShiftInput!): Shift!

  # Use this endpoint to un-invite a worker.
  businessUnInviteWorkerToShift(input: UnInviteWorkerToShiftInput!): ShiftInvite!

  # This endpoint is used to delete a shift.
  businessDeleteShift(shift_id: String!): Shift!

  # Updates a shift, send all workers regardless.
  businessUpdateShift(input: UpdateShiftInput!): Shift!

  # A business can use this endpoint to invite workers to the platform. It will send them a url with a unique invite code that can be used to sign up for the platform.
  businessInviteWorkerToApp(input: InviteWorkerInput!): Worker!

  # Use this endpoint to create a new worker position.
  businessCreatePosition(input: CreatePositionInput!): WorkerPosition!

  # Use this endpoint to delete a given worker position.
  businessDeletePosition(position_id: String!): WorkerPosition!

  # Use this endpoint to update a given worker position.
  businessUpdatePosition(input: UpdatePositionInput!): WorkerPosition!
  updateWorker(worker: UpdateWorkerInput!): Worker!
}

# The `Upload` scalar type represents a file upload.
scalar Upload
