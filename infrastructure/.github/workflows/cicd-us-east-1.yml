name: Staging workflow
# This workflow is triggered on pushes to the repository branch master.
on:
  push:
    branches:
      - master
      - LW-200_CI-CD

# Initializes environment variables for the workflow
env:
  REGION: us-east-1 # Deployment Region

  # What we need to do
# 1. run cdk and make all resources
# 2. Grab values (cognito, anything else) and inject them into app
# 3. Package up the application, push it onto ec2 instance(s)
# 4. Run everything inside the machine

jobs:
  deploy:
    name: Build And Deploy
    # This job runs on Linux
    runs-on: ubuntu-latest
    steps:
      # Checkout code from git repo branch configured above, under folder $GITHUB_WORKSPACE.
      - name: Checkout

  - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install CDK
        run: |
          npm install -g aws-cdk@1.62.0

      - name: Synth CDK
        run: |
          cdk synth \
          --app 'java -jar ./infrastructure/build/cdk/infrastructure-all.jar -apiLambdaPath ./infrastructure/build/cdk/api-lambdas.zip -webAssets ./infrastructure/build/cdk/web -domainName johntipper.org -region ${{ secrets.AWS_REGION }} -targetAccount ${{ secrets.AWS_TARGET_ACCOUNT }}' \
          --output build/cdk.out
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_TARGET_ACCOUNT: ${{ secrets.AWS_TARGET_ACCOUNT }}

      - name: Deploy CDK
        run: |
          cdk deploy --app ./build/cdk.out --require-approval never "*"
        if: github.ref == 'refs/heads/master'
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}